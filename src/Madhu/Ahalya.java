
package Madhu;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.net.URLConnection;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import com.google.code.chatterbotapi.*;

public class Ahalya extends javax.swing.JFrame {
    
    String s1;
    String compiled;
    String botname="MADHU";
    ChatterBotFactory factory = new ChatterBotFactory();
    

    int a;
    public Ahalya() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Madhu");

        jTextField1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Talk");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Madhu v0.1");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 306, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jTextField1)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 408, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(0, 4, Short.MAX_VALUE)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 4, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 312, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(0, 6, Short.MAX_VALUE)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 6, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        compiled="";
        s1=jTextField1.getText();
        compiled="YOU : "+s1;
  
        try {
            analyze(s1);
        } catch (Exception ex) {
            Logger.getLogger(Ahalya.class.getName()).log(Level.SEVERE, null, ex);    
        }
        try {
            ravi();
        } catch (Exception ex) {
            Logger.getLogger(Ahalya.class.getName()).log(Level.SEVERE, null, ex);
             compiled=compiled+"\n"+"Sorry An Error Occured! Check your internet connection!";
        }
        jTextArea1.setText(compiled);
        jTextField1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ahalya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ahalya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ahalya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ahalya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ahalya().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void analyze(String s1){
        String[] split = s1.split("\\s+");
        for( int i = 0; i < split.length; i++)
        {
            
            if(split[i].equalsIgnoreCase("weather")||split[i].equalsIgnoreCase("climate")||split[i].equalsIgnoreCase("temprature"))
            {
                compiled=compiled+"\n"+"";
                weather(split[i-1]);
            }
            
            else if(split[i].equalsIgnoreCase("music")||split[i].equalsIgnoreCase("song"))
            {
                try {
                    playsong();
                } catch (IOException ex) {
                    Logger.getLogger(Ahalya.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
           
            
        
        }
    }
        public void ravi() throws Exception
        {
        Boolean found;

        found = compiled.contains(botname);
        if(!found)
        {
            String s;
            ChatterBot bot2 = factory.create(ChatterBotType.PANDORABOTS, "b0dafd24ee35a477");
            ChatterBotSession bot2session = bot2.createSession();
            s = bot2session.think(s1);

            compiled=compiled+"\n"+botname+": "+s;
        }
        
        }
    
    public void weather(String loc)
    {
        try {
            URL googleWeatherXml = new URL("http://api.wunderground.com/api/c60a277faac7df83/forecast/q/in/"+loc+".xml");
          URLConnection uc = googleWeatherXml.openConnection();
            uc.connect();
         
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document doc = db.parse(uc.getInputStream());
            doc.getDocumentElement().normalize();
            NodeList forecast = doc.getElementsByTagName("forecast");
                for (int a = 0; a < forecast.getLength(); a++) {
                    Node forecastNode = forecast.item(a);
                              compiled=compiled+"\n"+botname+"Today's weather Report for "+loc;
                    if (forecastNode.getNodeType() == Node.ELEMENT_NODE) {
                          Element forecastElement = (Element) forecastNode;
                       
                          NodeList simpleforecast = forecastElement.getElementsByTagName("simpleforecast");
                       
                          for (int b = 0; b < simpleforecast.getLength(); b++) {
                              Node simpleforecastNode = simpleforecast.item(b);
                           
                              if (simpleforecastNode.getNodeType() == Node.ELEMENT_NODE) {
                                  Element simpleforecastElement = (Element) simpleforecastNode;
                               
                                  NodeList forecastdays = simpleforecastElement.getElementsByTagName("forecastdays");
                               
                                  for (int c = 0; c < forecastdays.getLength(); c++) {
                                      Node forecastdaysNode = forecastdays.item(c);
                                   
                                      if (forecastdaysNode.getNodeType() == Node.ELEMENT_NODE) {
                                          Element forecastdaysElement = (Element) forecastdaysNode;
                                       
                                          NodeList forecastday = forecastdaysElement.getElementsByTagName("forecastday");
                                       
                                          for (int d = 0; d < 1; d++) {
                                              Node forecastdayNode = forecastday.item(d);
                                           
                                              if (forecastdayNode.getNodeType() == Node.ELEMENT_NODE) {
                                                  Element forecastdayElement = (Element) forecastdayNode;
                                               
                                                  NodeList date = forecastdayElement.getElementsByTagName("date");
                                               
                                                  for (int e = 0; e < date.getLength(); e++) {
                                                    Node dateNode = date.item(e);
                                                 
                                                    if (dateNode.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element dateElement = (Element) dateNode;
                                                     
                                                        NodeList weekday = dateElement.getElementsByTagName("weekday");
                                                        Element day = (Element) weekday.item(0);
                                                        compiled=compiled+"\n          DAY: " + day.getTextContent();
                                                    }
                                                  }
                                               
                                                  NodeList high = forecastdayElement.getElementsByTagName("high");
                                               
                                                  for (int f = 0; f < high.getLength(); f++) {
                                                    Node highNode = high.item(f);
                                                 
                                                    if (highNode.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element highElement = (Element) highNode;
                                                        NodeList celsius = highElement.getElementsByTagName("celsius");
                                                        Element cel = (Element) celsius.item(0);
                                                        compiled=compiled+"\n          Today High: " + cel.getTextContent()+" Celsius";
                                                    }
                                                  }
                                               
                                                  NodeList low = forecastdayElement.getElementsByTagName("low");
                                               
                                                  for (int g = 0; g < low.getLength(); g++) {
                                                    Node lowNode = low.item(g);
                                                 
                                                    if (lowNode.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element lowElement = (Element) lowNode;
                                                        NodeList celsius = lowElement.getElementsByTagName("celsius");
                                                        Element cel = (Element) celsius.item(0);
                                                        compiled=compiled+"\n          Today Low: " + cel.getTextContent()+" Celsius";
                                                    }
                                                  }
                                               
                                                  NodeList avewind = forecastdayElement.getElementsByTagName("avewind");
                                               
                                                  for (int h = 0; h < avewind.getLength(); h++) {
                                                    Node avewindNode = avewind.item(h);
                                                 
                                                    if (avewindNode.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element avewindElement = (Element) avewindNode;
                                                        NodeList mph = avewindElement.getElementsByTagName("mph");
                                                        Element mp = (Element) mph.item(0);
                                                        //System.out.println("mph: " + mp.getTextContent());
                                                     
                                                        NodeList kph = avewindElement.getElementsByTagName("kph");
                                                        Element kp = (Element) kph.item(0);
                                                       compiled=compiled+"\n          WIND: " + kp.getTextContent()+" km/h in ";
                                                     
                                                        NodeList dir = avewindElement.getElementsByTagName("dir");
                                                        Element dr = (Element) dir.item(0);
                                                        compiled=compiled+" " + dr.getTextContent()+ " Direction";
                                                     
                                                        NodeList degrees = avewindElement.getElementsByTagName("degrees");
                                                        Element deg = (Element) degrees.item(0);
                                                        //System.out.println("Degree: " + deg.getTextContent());
                                                    }
                                                  }
                                               
                                                  NodeList conditions = forecastdayElement.getElementsByTagName("conditions");
                                                  Element con = (Element) conditions.item(0);
                                                  compiled=compiled+"\n          Conditions: " + con.getTextContent();
                                               
                                                  NodeList avehumidity = forecastdayElement.getElementsByTagName("avehumidity");
                                                  Element ave = (Element) avehumidity.item(0);
                                                  //System.out.println("avehumidity: " + ave.getTextContent());
                                              }
                                          }
                                      }
                                  }
                              }
                          }                      
                    }                
                }
           } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
  
    public void playsong() throws IOException
    {
        File folder = new File("D://Songs");
        File[] listOfFiles = folder.listFiles();
        Random rand = new Random();
        int i = rand.nextInt(listOfFiles.length);
        System.out.print(""+listOfFiles.length);
        
      if (listOfFiles[i].isFile()) {
        System.out.println("File " + listOfFiles[i].getName());
        if (Desktop.isDesktopSupported())
        Desktop.getDesktop().open(listOfFiles[i]);
      } else if (listOfFiles[i].isDirectory()) {
        System.out.println("Directory " + listOfFiles[i].getName());
      }
   
        compiled=compiled+"\n"+botname+": Sure! Currently Playing \n                     " + listOfFiles[i].getName(); 
    }
   
            
        
    }
    
            
    

